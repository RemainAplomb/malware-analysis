; includes
include \masm32\include\masm32rt.inc

; MASM OR Instruction Example

.386
.model flat, stdcall
option casemap :none

include \masm32\include\windows.inc
include \masm32\include\user32.inc
include \masm32\include\kernel32.inc

includelib \masm32\lib\user32.lib
includelib \masm32\lib\kernel32.lib

.data
    msgTemplate db "The result of OR operation is: %d", 0

.code

start:
    ; Let's define two 8-bit values to be used with the OR instruction.
    mov al, 0Fh    ; Load AL with 0Fh (0000 1111 in binary)
    mov bl, 33h    ; Load BL with 33h (0011 0011 in binary)

    ; Perform the OR operation. This will set AL to the result.
    ; The OR operation performs a bitwise OR between each pair of corresponding bits in its two operands.
    ; The result of OR is 1 if at least one of the bits is 1; otherwise, the result is 0.
    or al, bl      ; AL = AL OR BL

    ; Now, the AL register contains the result of the OR operation.
    ; Let's display this result in a message box.
    sub esp, 4     ; Reserve 4 bytes on the stack for the buffer
    push eax       ; Push the result onto the stack (it will be used as the argument for wsprintfA)
    push offset msgTemplate ; Push the address of the format string onto the stack
    lea eax, [esp + 8] ; Load the address of the buffer into EAX
    push eax       ; Push the address of the buffer onto the stack (it will be used as the first argument for wsprintfA)
    call wsprintfA ; Call the wsprintfA function to format the string

    ; Now, the buffer contains a string with the result. Let's display this string in a message box.
    push MB_OK     ; Push the message box type onto the stack
    push esp       ; Push the address of the buffer onto the stack (it will be used as the second argument for MessageBoxA)
    push 0         ; Push a null pointer onto the stack (it will be used as the first argument for MessageBoxA)
    call MessageBoxA ; Call the MessageBoxA function to display the message box

    ; Exit the program
    invoke ExitProcess, 0
end start
