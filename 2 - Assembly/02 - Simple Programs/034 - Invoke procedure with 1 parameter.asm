; includes
include \masm32\include\masm32rt.inc

; MASM Procedure Invocation Example

.386
.model flat, stdcall
option casemap :none

include \masm32\include\windows.inc
include \masm32\include\kernel32.inc

includelib \masm32\lib\kernel32.lib

.data
    msg db "The multiplied value is: ", 0
    buffer db 33 dup(?), 0  ; 32 bits + null terminator

.code

start:
    ; Let's use a simple number for demonstration
    mov eax, 7

    ; Push the value onto the stack
    push eax

    ; Call the multiplyByTwo procedure
    call multiplyByTwo

    ; Clean up the stack
    add esp, 4

    ; The result is in EAX
    push eax
    push offset buffer
    call dwordToString
    add esp, 8  ; Clean up the stack

    ; Print the result
    push offset buffer
    push offset msg
    call print
    add esp, 8  ; Clean up the stack

    invoke ExitProcess, 0

multiplyByTwo PROC val:DWORD
    ; Multiply the value by 2
    mov eax, val
    shl eax, 1
    ret
multiplyByTwo ENDP

dwordToString PROC val:DWORD, buffer:DWORD
    pusha
    mov eax, val
    mov edi, buffer
    add edi, 32
    mov byte ptr [edi], 0
    sub edi, 1

nextDigit:
    xor edx, edx
    mov ecx, 10
    div ecx
    add edx, '0'
    mov byte ptr [edi], dl
    sub edi, 1
    test eax, eax
    jnz nextDigit

    lea eax, [edi + 1]
    popa
    ret
dwordToString ENDP

print PROC msg:DWORD, val:DWORD
    push 0
    push val
    push msg
    push 0
    call MessageBoxA
    ret
print ENDP

end start
