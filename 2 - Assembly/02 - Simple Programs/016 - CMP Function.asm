; CMP Instruction in Assembly Language

; importing masm32
include \masm32\include\masm32rt.inc

.model small  ; Define the memory model of our program.

.stack 100h   ; Define the size of the stack.

.data          ; Begin the data segment where variables are defined.

    var1 dw 10 
    var2 dw 20
    equalMsg db "Equal!$"
    notEqualMsg db "Not Equal!$"
    lessThanMsg db "Less Than!$"
    greaterThanMsg db "Greater Than!$"

.code          ; Begin the code segment where our code is placed.

main proc      ; Start of a procedure

    ; Load the data segment into ds
    mov ax, @data   
    mov ds, ax

    ; Load 'var1' into ax and 'var2' into bx
    mov ax, var1
    mov bx, var2

    ; Compare ax and bx
    cmp ax, bx

    ; Jump if ax is equal to bx
    je Equal
    ; Jump if ax is not equal to bx
    jne NotEqual
    ; Jump if ax is less than bx
    jl Less
    ; Jump if ax is greater than bx
    jg Greater

    ; Each label represents a possible destination for a jump.
    ; The program will continue executing from the label to which it jumps.

Equal:
    ; Code to execute if ax is equal to bx
    mov dx, offset equalMsg
    mov ah, 09h
    int 21h
    jmp End

NotEqual:
    ; Code to execute if ax is not equal to bx
    mov dx, offset notEqualMsg
    mov ah, 09h
    int 21h
    jmp End

Less:
    ; Code to execute if ax is less than bx
    mov dx, offset lessThanMsg
    mov ah, 09h
    int 21h
    jmp End

Greater:
    ; Code to execute if ax is greater than bx
    mov dx, offset greaterThanMsg
    mov ah, 09h
    int 21h
    jmp End

End:
    ; End the program
    mov ax, 4C00h
    int 21h

main endp       ; End of the 'main' procedure
end main        ; End of the program
