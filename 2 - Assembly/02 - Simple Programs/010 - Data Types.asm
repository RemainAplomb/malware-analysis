; Data Type Sizes in Assembly Language

; importing masm32
include \masm32\include\masm32rt.inc

.model small  ; Define the memory model of our program.

.stack 100h   ; Define the size of the stack.

.data          ; Begin the data segment where variables are defined.

    byteVar db 1     ; 'db' stands for 'declare byte'. It's 1 byte in size.
    wordVar dw 1     ; 'dw' stands for 'declare word'. It's 2 bytes in size.
    dwordVar dd 1    ; 'dd' stands for 'declare doubleword'. It's 4 bytes in size.
    floatVar REAL4 1 ; 'REAL4' is a 4-byte floating-point number.
    doubleVar REAL8 1 ; 'REAL8' is an 8-byte floating-point number.

.code          ; Begin the code segment where our code is placed.

main proc      ; Start of a procedure

    ; Load the data segment into ds
    mov ax, @data   
    mov ds, ax

    ; Load each variable into a register and print it
    ; The size of the register we use depends on the size of the data

    ; Byte
    mov al, byteVar
    add al, 30h ; convert number to ASCII for printing
    mov ah, 02h ; function to write a character to the console
    int 21h     ; DOS interrupt

    ; Word
    mov ax, wordVar
    add ax, 3030h ; convert number to ASCII for printing
    mov bx, ax     ; save ax because we will use it for the DOS function
    mov ah, 02h    ; function to write a character to the console
    mov al, bh     ; print first character
    int 21h
    mov al, bl     ; print second character
    int 21h

    ; We can't easily print larger variables in assembly,
    ; so we'll stop here for simplicity.

    ; End the program
    mov ax, 4C00h
    int 21h

main endp       ; End of the 'main' procedure
end main        ; End of the program
