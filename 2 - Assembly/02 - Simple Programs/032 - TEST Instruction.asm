; includes
include \masm32\include\masm32rt.inc

; MASM TEST Instruction Example

.386
.model flat, stdcall
option casemap :none

include \masm32\include\windows.inc
include \masm32\include\kernel32.inc

includelib \masm32\lib\kernel32.lib

.data
    msgEven db "The number is even.", 0
    msgOdd db "The number is odd.", 0

.code

start:
    ; Let's use a simple number for demonstration
    mov eax, 7

    ; The TEST instruction performs a bitwise AND operation on its two operands and sets the flags 
    ; according to the result. But unlike the AND instruction, it doesn't store the result.
    ; Here, we're testing whether the least significant bit of the number is 1.
    ; If it is, the number is odd. If it's 0, the number is even.
    test eax, 1  ; eax AND 1

    ; If the result of the TEST instruction was zero (meaning the least significant bit of the number is 0),
    ; the Zero flag is set and the JZ (Jump if Zero) instruction will jump to the specified label.
    jz even

    ; If the jump didn't occur, the number is odd.
    push offset msgOdd
    call print
    jmp end

even:
    ; If the jump occurred, the number is even.
    push offset msgEven
    call print

end:
    invoke ExitProcess, 0

print PROC str:DWORD
    push 0
    push str
    push str
    push 0
    call MessageBoxA
    ret
print ENDP

end start
