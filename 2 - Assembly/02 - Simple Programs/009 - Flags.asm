; Flags in Assembly language

; importing masm32
include \masm32\include\masm32rt.inc

.model small  ; Define the memory model of our program.

.stack 100h   ; Define the size of the stack.

.data          ; Begin the data segment where variables are defined.

    var1 dw 10 
    var2 dw 30000
    result dw ?  ; '?' denotes uninitialized data

.code          ; Begin the code segment where our code is placed.

main proc      ; Start of a procedure

    ; Load the data segment into ds
    mov ax, @data   
    mov ds, ax

    ; Load 'var1' into ax and 'var2' into bx
    mov ax, var1
    mov bx, var2

    ; Add 'var2' to 'var1' and store in 'ax'
    ; This will cause a carry because the result is larger than what 'ax' can hold (65535)
    add ax, bx
    ; The carry flag (CF) will be set as a result of the carry
    ; We can use the jnc (jump if not carry) instruction to jump to a label if CF is 0
    jnc noCarry
    ; If there's a carry, we reach this point
    mov result, -1  ; We'll use -1 to indicate a carry occurred
    jmp endProg

noCarry:       ; We jump here if there's no carry
    ; Store the result in 'result'
    mov result, ax  
    
    ; Check if 'result' is zero
    ; First, we move 'result' into 'ax' so we can use the 'or' instruction
    mov ax, result
    or ax, ax
    ; The zero flag (ZF) will be set if 'result' is zero
    ; We can use the jz (jump if zero) instruction to jump to a label if ZF is 1
    jz zeroResult
    ; If 'result' is not zero, we reach this point
    jmp endProg

zeroResult:    ; We jump here if 'result' is zero
    ; If 'result' is zero, we set it to -2
    mov result, -2 

endProg:       ; We jump here to end the program
    mov ax, 4C00h
    int 21h

main endp       ; End of the 'main' procedure
end main        ; End of the program
