; Registers in Assembly language

; importing masm32
include \masm32\include\masm32rt.inc

.model small  ; Define the memory model of our program.

.stack 100h   ; Define the size of the stack.

.data          ; Begin the data segment where variables are defined.

    var1 dw 10 
    var2 dw 20
    result dw ?  ; '?' denotes uninitialized data

.code          ; Begin the code segment where our code is placed.

main proc      ; Start of a procedure

    ; ax: It is one of the four general purpose 16-bit registers. We use it to store our variables and perform operations.
    ; bx: Another one of the four general purpose 16-bit registers, used here to hold the variable var2 for the addition operation.
    ; cx: Used to store the result of the addition and demonstrate the inc, dec, and neg instructions.

    ; We also use the ds data segment register to hold the segment address of our data.
    ; The inc, dec, and neg instructions perform operations directly on the cx register:

    ; inc cx: Increments the value in cx by 1.
    ; dec cx: Decrements the value in cx by 1.
    ; neg cx: Changes the sign of the value in cx.
    
    ; Load the data segment into ds
    mov ax, @data   
    mov ds, ax

    ; Load 'var1' into ax and 'var2' into bx
    mov ax, var1
    mov bx, var2
    ; Add 'var2' to 'var1' and store in 'ax'
    add ax, bx
    ; Store the result in 'result'
    mov result, ax  
    
    ; Move the result to 'cx'
    mov cx, result
    ; Increment the value in 'cx'
    inc cx
    ; Decrement the value in 'cx'
    dec cx
    ; Negate the value in 'cx'
    neg cx
    ; Store the result back in 'result'
    mov result, cx

    ; End the program
    mov ax, 4C00h
    int 21h

main endp       ; End of the 'main' procedure
end main        ; End of the program
