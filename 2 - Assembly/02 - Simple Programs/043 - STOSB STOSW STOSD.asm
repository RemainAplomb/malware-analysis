; includes
include \masm32\include\masm32rt.inc

.386
.model flat, stdcall
option casemap :none

include \masm32\include\windows.inc
include \masm32\include\kernel32.inc
includelib \masm32\lib\kernel32.lib

.data
buffer BYTE 50 dup(0)   ; Reserve 50 bytes for buffer

.code

main PROC
    ; Clear the direction flag for forward movement
    cld

    ; Use STOSB (store string byte)
    lea edi, buffer    ; Load the address of the buffer into EDI
    mov al, 'A'        ; Store the character 'A' in AL
    stosb              ; Store AL at the address ES:(E)DI and increment DI (or EDI) by 1

    ; Use STOSW (store string word)
    lea edi, buffer    ; Load the address of the buffer into EDI
    mov ax, 'AB'       ; Store the characters 'AB' in AX
    stosw              ; Store AX at the address ES:(E)DI and increment DI (or EDI) by 2

    ; Use STOSD (store string doubleword)
    lea edi, buffer    ; Load the address of the buffer into EDI
    mov eax, 'ABCD'    ; Store the characters 'ABCD' in EAX
    stosd              ; Store EAX at the address ES:(E)DI and increment DI (or EDI) by 4

    ; Now buffer will hold the string "ABCD"

    ; Terminate the process
    push 0
    call ExitProcess
main ENDP

end main
