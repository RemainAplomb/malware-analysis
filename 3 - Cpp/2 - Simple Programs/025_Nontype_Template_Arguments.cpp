#include <iostream>

// The 'typename T' and 'int N' before the function prototype are template parameters.
// T is a type parameter and N is a non-type parameter.
template <typename T, int N>
void print_array(T (&arr)[N]) {  // Pass an array by reference. The array's size is determined by the template parameter N.
    // Print all elements in the array.
    for(int i = 0; i < N; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

int main() {
    int arr1[5] = {1, 2, 3, 4, 5}; // Declare and initialize an array of integers.
    double arr2[3] = {1.1, 2.2, 3.3}; // Declare and initialize an array of doubles.
  
    print_array<int, 5>(arr1); // Call the template function with T=int and N=5.
    print_array<double, 3>(arr2); // Call the template function with T=double and N=3.
  
    return 0;
}
