#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

// Function to calculate the minimum of three integers
int min(int a, int b, int c)
{
    return std::min(std::min(a, b), c);
}

// Function to calculate the Levenshtein Distance between two strings
int levenshteinDistance(const std::string &str1, const std::string &str2)
{
    int m = str1.length();
    int n = str2.length();

    // Create a 2D table to store the distances
    std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));

    // Initialize the table
    for (int i = 0; i <= m; ++i)
    {
        dp[i][0] = i;
    }
    for (int j = 0; j <= n; ++j)
    {
        dp[0][j] = j;
    }

    // Fill the table using dynamic programming
    for (int i = 1; i <= m; ++i)
    {
        for (int j = 1; j <= n; ++j)
        {
            if (str1[i - 1] == str2[j - 1])
            {
                dp[i][j] = dp[i - 1][j - 1];
            }
            else
            {
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]);
            }
        }
    }

    // Return the final result (Levenshtein Distance)
    return dp[m][n];
}

// Function to check if the input word is correct or if it contains typos
bool checkWord(const std::string &inputWord, const std::vector<std::string> &correctWords, int maxDistance)
{
    for (const std::string &correctWord : correctWords)
    {
        int distance = levenshteinDistance(inputWord, correctWord);

        // If the Levenshtein Distance is less than or equal to the maximum allowed distance, it's a match
        if (distance <= maxDistance)
        {
            return true;
        }
    }
    return false;
}

int main()
{
    // Sample correct words to compare against
    std::vector<std::string> correctWords = {"apple", "banana", "orange", "grape", "peach"};

    std::string inputWord;
    int maxDistance = 2; // Set the maximum allowed Levenshtein Distance for similarity

    std::cout << "Enter a word to check for typos: ";
    std::cin >> inputWord;

    if (checkWord(inputWord, correctWords, maxDistance))
    {
        std::cout << "The word is correct or has minor typos." << std::endl;
    }
    else
    {
        std::cout << "The word may contain typos or is not a recognized word." << std::endl;
    }

    return 0;
}
