#include <iostream>
#include <string>

// Here we declare a template function
// The 'typename T' before the function prototype denotes that T is a placeholder for any data type.
template <typename T>
T get_max(T a, T b) {
    // Here we define our function. T can be any type: int, double, string, etc.
    return (a > b) ? a : b; // The ternary operator returns a if a > b, otherwise it returns b.
}

int main() {
    // We call our function with different types of parameters.
    int max_int = get_max<int>(3, 7); // T is int.
    double max_double = get_max<double>(3.14, 2.78); // T is double.
    std::string max_str = get_max<std::string>("apple", "banana"); // T is std::string.
  
    // Print the results.
    std::cout << "Max integer: " << max_int << "\n"; // Output: 7
    std::cout << "Max double: " << max_double << "\n"; // Output: 3.14
    std::cout << "Max string: " << max_str << "\n"; // Output: banana

    return 0;
}
