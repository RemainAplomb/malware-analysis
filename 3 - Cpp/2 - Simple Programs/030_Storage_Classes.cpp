#include <iostream>

// External variable
// External: Variables are like static variables, but they're also visible
// to other files if the extern keyword is used. The ex variable is accessible
// inside useExternal() without being passed as a parameter.
int ex = 0;

// Function to demonstrate automatic and static variables
void autoStatic()
{
    // Automatic variable (default)
    // Automatic: Variables are created at the beginning of the block they're
    // declared in and destroyed at the end. Each time the function is called,
    // a new a is created.
    int a = 0;

    // Static variable
    // Static: Variables are created at the beginning of the program and destroyed
    // at the end. The s variable persists across function calls, so it increments
    // each time autoStatic() is called.
    static int s = 0;

    a++;
    s++;

    std::cout << "Automatic = " << a << ", Static = " << s << std::endl;
}

// Function to demonstrate external variable
void useExternal()
{
    ex++;
    std::cout << "External = " << ex << std::endl;
}

int main()
{
    // Register variable (stored in the CPU's register instead of RAM for faster access)
    // Register: Like automatic variables, but they're stored in the CPU's register instead
    // of RAM. This is generally used for variables that need to be accessed frequently.
    // Note: in modern C++, the register keyword is deprecated and it's generally recommended
    // to let the compiler handle optimization.
    register int r = 5;

    // Print register variable
    std::cout << "Register = " << r << std::endl;

    // Call autoStatic three times
    for (int i = 0; i < 3; ++i)
    {
        autoStatic();
    }

    // Call useExternal three times
    for (int i = 0; i < 3; ++i)
    {
        useExternal();
    }

    return 0;
}
