import multiprocessing
import threading
import time
from queue import Queue, Empty

# Thread function
def thread_function(queue):
    print("Thread ID:", threading.get_ident())

    while True:
        try:
            task = queue.get(timeout=1)  # Get a task from the queue
            print("Thread processing task:", task)
            # Simulate some work
            time.sleep(2)
            print("Thread completed task:", task)
        except Empty:
            break

    print("Thread function execution complete.")

# Process function
def process_function():
    print("Process ID:", multiprocessing.current_process().pid)
    print("Process name:", multiprocessing.current_process().name)

    num_threads = 4
    tasks = [1, 2, 3, 4, 5, 6, 7, 8]
    task_queue = Queue()

    # Put tasks into the queue
    for task in tasks:
        task_queue.put(task)

    # Create the threads within the process
    threads = []
    for _ in range(num_threads):
        create_thread = threading.Thread(target=thread_function, args=(task_queue,))
        threads.append(create_thread)

    # Start the threads within the process
    for thread in threads:
        thread.start()

    # Wait for the threads to finish
    for thread in threads:
        thread.join()

    time.sleep(2)
    print("Process function execution complete.")

if __name__ == "__main__":
    # Create a new process with a custom name
    process = multiprocessing.Process(target=process_function, name="MyProcess")
    process.start()
    process.join()
    print("Main process execution complete.")
