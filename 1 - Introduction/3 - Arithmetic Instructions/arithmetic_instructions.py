# Arithmetic Instructions Demonstration

# ADD (Addition)
def add_demo(eax, ebx):
    result = eax + ebx
    print(f"ADD Demo: {eax} + {ebx} = {result}")

# SUB (Subtraction)
def sub_demo(eax, ebx):
    result = eax - ebx
    print(f"SUB Demo: {eax} - {ebx} = {result}")

# MUL (Multiplication)
def mul_demo(eax, ebx):
    result = eax * ebx
    print(f"MUL Demo: {eax} * {ebx} = {result}")

# DIV (Division)
def div_demo(eax, ebx):
    result = eax / ebx
    print(f"DIV Demo: {eax} / {ebx} = {result}")

# INC (Increment)
def inc_demo(eax):
    eax += 1
    print(f"INC Demo: Incremented value of EAX = {eax}")

# DEC (Decrement)
def dec_demo(eax):
    eax -= 1
    print(f"DEC Demo: Decremented value of EAX = {eax}")

# AND (Bitwise AND)
def and_demo(eax, ebx):
    result = eax & ebx
    print(f"AND Demo: {bin(eax)} & {bin(ebx)} = {bin(result)}")

# OR (Bitwise OR)
def or_demo(eax, ebx):
    result = eax | ebx
    print(f"OR Demo: {bin(eax)} | {bin(ebx)} = {bin(result)}")

# XOR (Bitwise XOR)
def xor_demo(eax, ebx):
    result = eax ^ ebx
    print(f"XOR Demo: {bin(eax)} ^ {bin(ebx)} = {bin(result)}")

# Main function
def main():
    eax = 10
    ebx = 5

    add_demo(eax, ebx)
    sub_demo(eax, ebx)
    mul_demo(eax, ebx)
    div_demo(eax, ebx)
    inc_demo(eax)
    dec_demo(eax)
    and_demo(eax, ebx)
    or_demo(eax, ebx)
    xor_demo(eax, ebx)

if __name__ == "__main__":
    main()
