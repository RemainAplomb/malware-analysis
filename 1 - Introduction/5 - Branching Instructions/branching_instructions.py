class BranchingInstructionsSimulator:
    def __init__(self, hex_locations):
        self.hex_locations = hex_locations
        self.program_counter = 0
        self.zf_flag = False
        self.cf_flag = False
        self.sf_flag = False

    def unconditional_jump(self, location):
        print("\n=====================================================\n")
        if location in self.hex_locations:
            print(f"Unconditionally jumps to the location: {location}")
            self.program_counter = self.hex_locations.index(location)
            print("Jumping to the specified location:", location)
        else:
            print("Location not found in the specified hex locations.")
        print("\n=====================================================\n")

    def jump_if_equal(self, location):
        print("\n=====================================================\n")
        if location in self.hex_locations:
            print(f"Jumps to the location: {location} if the previous comparison was equal (ZF flag set)")
            if self.zf_flag:
                self.program_counter = self.hex_locations.index(location)
                print("Jumping to the specified location:", location)
            else:
                print("ZF flag is not set. No jump performed.")
        else:
            print("Location not found in the specified hex locations.")
        print("\n=====================================================\n")

    def set_flags(self, zf, cf, sf):
        self.zf_flag = zf
        self.cf_flag = cf
        self.sf_flag = sf

    def print_flags(self):
        print("\n=====================================================\n")
        print(f"ZF flag: {self.zf_flag}, CF flag: {self.cf_flag}, SF flag: {self.sf_flag}")
        print("\n=====================================================\n")

    def print_current_location(self):
        print("\n=====================================================\n")
        print(f"Current location: {self.hex_locations[self.program_counter]}")
        print("\n=====================================================\n")

    def jump_if_not_equal(self, location):
        print("\n=====================================================\n")
        if location in self.hex_locations:
            print(f"Jumps to the location: {location} if the previous comparison was not equal (ZF flag not set)")
            if not self.zf_flag:
                self.program_counter = self.hex_locations.index(location)
                print("Jumping to the specified location:", location)
            else:
                print("ZF flag is set. No jump performed.")
        else:
            print("Location not found in the specified hex locations.")
        print("\n=====================================================\n")

    def jump_if_above(self, location):
        print("\n=====================================================\n")
        if location in self.hex_locations:
            print(f"Jumps to the location: {location} if the previous comparison was above (CF and ZF flags not set)")
            if not self.cf_flag and not self.zf_flag:
                self.program_counter = self.hex_locations.index(location)
                print("Jumping to the specified location:", location)
            else:
                print("CF or ZF flag is set. No jump performed.")
        else:
            print("Location not found in the specified hex locations.")
        print("\n=====================================================\n")


# Define the hex locations
hex_locations = ["0x1000", "0x2000", "0x3000"]

# Create an instance of the BranchingInstructionsSimulator class
simulator = BranchingInstructionsSimulator(hex_locations)

# Examples of using the branching instructions
simulator.set_flags(True, False, False)
simulator.print_flags()
simulator.print_current_location()

simulator.jump_if_equal("0x2000")

simulator.set_flags(False, False, True)
simulator.print_flags()
simulator.print_current_location()

simulator.jump_if_not_equal("0x2000")

simulator.unconditional_jump("0x1000")

simulator.print_current_location()

simulator.jump_if_above("0x3000")
