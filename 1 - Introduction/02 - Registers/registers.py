# Malware Simulation: Register Manipulation

# EAX Register - Accumulator
def manipulate_eax(eax):
    print("Original EAX value:", hex(eax))
    eax += 0x1111
    print("Modified EAX value:", hex(eax))
    return eax

# EBX Register - Base
def manipulate_ebx(ebx):
    print("\nOriginal EBX value:", hex(ebx))
    # Bitwise XOR operation between the value stored in the EBX 
    # register and the hexadecimal value 0xffff.
    ebx ^= 0xffff
    print("Modified EBX value:", hex(ebx))
    return ebx

# ECX Register - Counter
def manipulate_ecx(ecx):
    print("\nOriginal ECX value:", ecx)
    # Subtract to counter
    ecx -= 5
    print("Modified ECX value:", ecx)
    return ecx

# EDX Register - Data
def manipulate_edx(edx):
    print("\nOriginal EDX value:", bin(edx))
    # Bitwise OR operation between the value stored in the EDX 
    # register and the binary value 0b11001100
    edx |= 0b11001100
    print("Modified EDX value:", bin(edx))
    return edx

# ESI Register - Source Index
def manipulate_esi(esi):
    print("\nOriginal ESI value:", esi)
    # Manipulate string by making it all caps
    esi = esi.upper()
    print("Modified ESI value:", esi)
    return esi

# EDI Register - Destination Index
def manipulate_edi(edi):
    print("\nOriginal EDI value:", edi)
    # Reverse the EDI values
    edi.reverse()
    print("Modified EDI value:", edi)
    return edi

# EBP Register - Base Pointer
def manipulate_ebp(ebp):
    print("\nOriginal EBP value:", hex(ebp))
    # Subtracts the hexadecimal value 0x1000 from the value stored in the EBP register
    ebp -= 0x1000
    print("Modified EBP value:", hex(ebp))
    return ebp

# ESP Register - Stack Pointer
def manipulate_esp(esp):
    print("\nOriginal ESP value:", hex(esp))
    # Subtracts the hexadecimal value 0x1000 from the value stored in the ESP register
    esp -= 0x100
    print("Modified ESP value:", hex(esp))
    return esp

# EIP Register - Instruction Pointer
def manipulate_eip(eip):
    print("\nOriginal EIP value:", hex(eip))
    # Subtracts the hexadecimal value 0x1000 from the value stored in the EIP register
    eip += 0x1000
    print("Modified EIP value:", hex(eip))
    return eip

# Main function
def main():
    eax = 0x12345678
    eax = manipulate_eax(eax)

    ebx = 0xabcdef
    ebx = manipulate_ebx(ebx)

    ecx = 10
    ecx = manipulate_ecx(ecx)

    edx = 0b10101010
    edx = manipulate_edx(edx)

    esi = "Hello, world!"
    esi = manipulate_esi(esi)

    edi = [1, 2, 3, 4]
    edi = manipulate_edi(edi)

    ebp = 0x7ffffffe
    ebp = manipulate_ebp(ebp)

    esp = 0x7fffffff
    esp = manipulate_esp(esp)

    eip = 0x400000
    eip = manipulate_eip(eip)

if __name__ == "__main__":
    main()
