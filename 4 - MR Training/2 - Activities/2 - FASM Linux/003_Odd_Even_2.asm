; Odd or Even Program 2

format ELF executable 3 ; Use the ELF format for Unix/Linux executables.

entry main ; Start with the main label

; DATA SEGMENT
segment readable writeable
    input_data db 10 dup(0)         ; Allocate 10 bytes for input_data.

    odd_message db "The number inputted number is Odd.", 0xA
    odd_length = $-odd_message

    even_message db "The number inputted number is Even.", 0xA
    even_length = $-even_message

    non_digit_message db "Invalid Input: Must not include non-digit characters", 0xA
    non_digit_length = $-non_digit_message

; CODE SEGMENT
segment readable executable
main:
    CALL cin                            ; needs data: "input_data db 10 dup(0)"
    CALL string_to_int
    CALL check_odd_even

    JMP terminate_program

; trying to copy std::cin hahahaha
cin:
    ; sys_read syscall: to read from the console
    MOV eax, 3                          ; Syscall number for sys_read.
    MOV ebx, 0                          ; File descriptor 0 is stdin (keyboard input).
    MOV ecx, input_data                 ; ECX points to the location where input_data should be stored.
    MOV edx, 10                         ; Maximum number of bytes to read.
    INT 0x80                            ; Trigger interrupt to call the Linux kernel.
    MOV [ecx + eax], byte 0             ; Null-terminate the string based on the number of bytes actually read
    RET        ; Return back to main

return:
    RET ; Return back to main

string_to_int:
    ; STRING TO INT CONVERSION
    MOV esi, input_data                 ; ESI will point to the start of the string.
    XOR edi, edi                        ; Clear EDI, which will store the resulting integer.
    ; JMP string_to_int_loop

string_to_int_loop:
    ; Fetch the current character.
    MOVZX eax, byte [esi]
    TEST  eax, eax                      ; Check if we've reached the null terminator.
    JZ    return                        ; would have been better if there return if zero

    ; Check for newline (Enter key).
    CMP   eax, 0xA
    JE    return

    ; Check if character is a valid digit.
    CMP   eax, '0'                      ; Compare to ASCII '0'
    JL    invalid_input_error           ; If less, not a digit
    CMP   eax, '9'                      ; Compare to ASCII '9'
    JG    invalid_input_error           ; If greater, not a digit

    SUB   eax, '0'                      ; Convert character to an integer ('0' becomes 0, '1' becomes 1, etc.).
    IMUL  edi, edi, 10                  ; Multiply the current result by 10 (shift left in base 10).
    ADD   edi, eax                      ; Add the new digit to the result.
    INC   esi                           ; Move to the next character in the string.
    JMP   string_to_int_loop            ; Repeat for the next character.

invalid_input_error:
    ; Point ECX to the "Invalid Input" message.
    MOV ecx, non_digit_message      ; load message to ecx
    MOV edx, non_digit_length       ; load length to edx
    CALL print
    JMP terminate_program

check_odd_even:
    ; CHECK IF ODD OR EVEN
    ; The least significant bit determines if a number is odd (1) or even (0).
    TEST  edi, 1                        ; Testing the least significant bit.
    JZ    even                          ; If the bit is 0, the number is even.
    ; JMP odd

odd:
    ; Point ECX to the "Odd" message.
    MOV ecx, odd_message                ; load message to ecx
    MOV edx, odd_length                 ; load length to edx
    JMP print

even:
    ; Point ECX to the "Even" message.
    MOV ecx, even_message               ; load message to ecx
    MOV edx, even_length                ; load length to edx
    ; JMP print

; just copying python print hahahaha
print:
    ; sys_write syscall: to display text on the console.
    MOV eax, 4 ; Syscall number for sys_write.
    MOV ebx, 1 ; File descriptor 1 is stdout (console output).
    int 0x80         ; Trigger interrupt to call the Linux kernel.
    RET ; Return back to main

terminate_program:
    ; sys_exit syscall: to end the program.
    mov eax, 1       ; Syscall number for sys_exit.
    xor ebx, ebx     ; Return an exit code of 0.
    int 0x80         ; Trigger interrupt to call the Linux kernel.