; This FASM program checks if a number entered by the user is odd or even.

format ELF executable 3 ; Use the ELF format for Unix/Linux executables.

entry start ; The starting point of the program.

; Code segment
segment readable executable

start:
    ; --- INPUT READING ---

    ; sys_read syscall: to read from the console
    mov eax, 3       ; Syscall number for sys_read.
    mov ebx, 0       ; File descriptor 0 is stdin (keyboard input).
    mov ecx, input   ; ECX points to the location where input should be stored.
    mov edx, 10      ; Maximum number of bytes to read.
    int 0x80         ; Trigger interrupt to call the Linux kernel.

    ; --- STRING TO INTEGER CONVERSION ---

    mov esi, input    ; ESI will point to the start of the string.
    xor edi, edi      ; Clear EDI, which will store the resulting integer.
convert:
    ; Fetch the current character.
    movzx eax, byte [esi]
    test  eax, eax    ; Check if we've reached the null terminator.
    jz    done_conversion
    ; Convert character to an integer ('0' becomes 0, '1' becomes 1, etc.).
    sub   eax, '0'
    ; Multiply the current result by 10 (shift left in base 10).
    imul  edi, edi, 10
    ; Add the new digit to the result.
    add   edi, eax
    ; Move to the next character in the string.
    inc   esi
    ; Repeat for the next character.
    jmp   convert

done_conversion:

    ; --- ODD/EVEN CHECK ---

    ; The least significant bit determines if a number is odd (1) or even (0).
    test  edi, 1    ; Testing the least significant bit.
    jz    even      ; If the bit is 0, the number is even.

odd:
    ; Point ECX to the "Odd" message.
    mov ecx, odd_msg
    mov edx, odd_length
    jmp print

even:
    ; Point ECX to the "Even" message.
    mov ecx, even_msg
    mov edx, even_length

print:
    ; --- OUTPUT TO CONSOLE ---

    ; sys_write syscall: to display text on the console.
    mov eax, 4       ; Syscall number for sys_write.
    mov ebx, 1       ; File descriptor 1 is stdout (console output).
    int 0x80         ; Trigger interrupt to call the Linux kernel.

    ; --- PROGRAM EXIT ---

    ; sys_exit syscall: to end the program.
    mov eax, 1       ; Syscall number for sys_exit.
    xor ebx, ebx     ; Return an exit code of 0.
    int 0x80         ; Trigger interrupt to call the Linux kernel.

; Data segment
segment readable writeable
    input db 10 dup(0)         ; Allocate 10 bytes for input.
    odd_msg db 'Odd', 0xA      ; 'Odd' message followed by a newline.
    odd_length = $-odd_msg     ; Calculate the length of the 'Odd' message.
    even_msg db 'Even', 0xA    ; 'Even' message followed by a newline.
    even_length = $-even_msg   ; Calculate the length of the 'Even' message.