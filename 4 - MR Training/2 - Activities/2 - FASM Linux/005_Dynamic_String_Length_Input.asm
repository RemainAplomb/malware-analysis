; Dynamic String Length Print

format ELF executable 3             ; Use the ELF format for Unix/Linux executables.
entry main                         ; Define the program entry point

; DATA SEGMENT
segment readable writeable
    input_data db 100 dup(0)       ; Buffer to store user input.
    prompt_message db "Please enter 5 numbers: "

; CODE SEGMENT
segment readable executable
main:
    CALL ask_user
    CALL cin

    MOV ecx, input_data
    CALL print

    JMP terminate_program

ask_user:
    ; Prompt the user to enter 5 numbers.
    MOV ecx, prompt_message
    JMP print

print:
    ; Display a message.
    MOV eax, 4                  ; syscall: sys_write
    MOV ebx, 1                  ; file descriptor: stdout
    PUSH ecx                    ; Preserve ecx

    ; Find the length of the message
    XOR edx, edx                ; Clear edx for length calculation

find_end:
    CMP byte [ecx], 0           ; Check for null terminator
    JE end_found
    INC ecx                     ; Move to the next character
    INC edx                     ; Increment string length
    JMP find_end                ; Repeat for next character

end_found:
    POP ecx                     ; Restore the original value of ecx
    INT 0x80                    ; syscall: sys_write (print the message)
    RET


cin:
    ; Read from stdin and store in input_data.
    MOV eax, 3
    MOV ebx, 0
    MOV ecx, input_data
    MOV edx, 100
    INT 0x80
    RET

terminate_program:
    ; End the program.
    MOV eax, 1
    XOR ebx, ebx
    INT 0x80