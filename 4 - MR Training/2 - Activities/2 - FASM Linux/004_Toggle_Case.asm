; Toggle Case Program

format ELF executable 3 ; Use the ELF format for Unix/Linux executables.
entry main ; Define the program entry point

; DATA SEGMENT
segment readable writeable
    input_data db 100 dup(0)             ; Buffer to store user input.
    prompt_message db "Enter a string: "; Message to prompt the user for input.
    prompt_length =$-prompt_message

; CODE SEGMENT
segment readable executable
main:
    CALL ask_user                       ; Display prompt asking the user for input.
    CALL cin                            ; Read user's input.
    CALL toggle_case                    ; Toggle the case of each character in the input.
    CALL result                         ; Print the modified input.

    JMP terminate_program

cin:
    ; Read from stdin and store in input_data.
    MOV eax, 3                          ; Syscall number for sys_read.
    MOV ebx, 0                          ; File descriptor 0 is stdin.
    MOV ecx, input_data                 ; Point to the buffer to store input.
    MOV edx, 100                        ; Maximum number of bytes to read.
    INT 0x80                            ; Call the kernel.
    MOV [ecx + eax - 1], byte 0         ; Null-terminate the string to remove newline.
    RET

return:
    RET

toggle_case:
    MOV esi, input_data                 ; Point to the start of the input string.

toggle_loop:
    ; Examine each character of the string.
    MOVZX eax, byte [esi]               ; Load the current character.
    TEST  eax, eax                      ; Check for null terminator.
    JZ    add_new_line

    ; Check and convert lowercase to uppercase.
    CMP   eax, 'a'
    JL    not_lowercase
    CMP   eax, 'z'
    JG    not_lowercase
    SUB   eax, 32                       ; Convert to uppercase.
    MOV   [esi], al
    JMP   next_character

add_new_line:
    MOV byte [esi], 0xA                 ; Append newline character.
    INC esi
    MOV byte [esi], 0                   ; Append null terminator after the newline.
    RET

not_lowercase:
    ; Check and convert uppercase to lowercase.
    CMP   eax, 'A'
    JL    next_character
    CMP   eax, 'Z'
    JG    next_character
    ADD   eax, 32                       ; Convert to lowercase.
    MOV   [esi], al

next_character:
    INC   esi                           ; Move to the next character.
    JMP   toggle_loop

ask_user:
    MOV ecx, prompt_message             ; Load the prompt message.
    MOV edx, prompt_length              ; Load the length of the prompt message.
    JMP print

result:
    MOV ecx, input_data                 ; Load the modified input string.
    ; MOV edx, [input_data]               ; Load the length of the modified string.
    JMP print

print:
    ; Display the provided message on stdout.
    MOV eax, 4                          ; Syscall number for sys_write.
    MOV ebx, 1                          ; File descriptor 1 is stdout.
    INT 0x80                            ; Call the kernel.
    RET

terminate_program:
    ; Terminate the program.
    mov eax, 1                          ; Syscall number for sys_exit.
    xor ebx, ebx                        ; Exit code 0.
    int 0x80                            ; Call the kernel.