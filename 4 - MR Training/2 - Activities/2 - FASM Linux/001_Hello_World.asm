; Printing Hello World using CALL and RETURNS

format ELF executable 3 				; Use the ELF format for Unix/Linux executables.

entry main								; Start with the main label

; DATA SEGMENT
segment readable writeable

to_print db "Hello, World!", 0xA		; Our Message
to_print_length = $-to_print			; Use $-{string_variable_name} to get the length of the variable



; CODE SEGMENT
segment readable executable

main:
	CALL message_pointer				; Call the message_pointer label/function
	CALL print							; Call the print label_function

	JMP terminate_program

message_pointer:
	MOV ecx, to_print
	MOV edx, to_print_length
	RET									; Return back to main

print:
	; sys_write syscall: to display text on the console.
	MOV eax, 4							; Syscall number for sys_write.
	MOV ebx, 1							; File descriptor 1 is stdout (console output).
	int 0x80         					; Trigger interrupt to call the Linux kernel.
	RET									; Return back to main

terminate_program:
	; sys_exit syscall: to end the program.
	mov eax, 1       					; Syscall number for sys_exit.
	xor ebx, ebx     					; Return an exit code of 0.
	int 0x80         					; Trigger interrupt to call the Linux kernel.
