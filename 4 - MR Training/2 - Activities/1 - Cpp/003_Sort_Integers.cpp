#include <iostream>
#include <array>

// This function will use quick sort algorithm
// Basically, we choose our pivot which will act as basis for sorting
// it will put smaller one to the left side, and put higher values to right
void quickSort(int arr[], int low, int high)
{
    // Note: If the low index is less than the high index, there's more than one element to sort.
    // else, we can stop recursivity
    if (low < high)
    {
        int pivot = arr[high]; // Choose the rightmost element/supposed highest value
        int i = low - 1;       // Index of the smaller element/supposed smaller value

        // Partitioning the array around the pivot.
        for (int j = low; j < high; ++j)
        {
            // if integer in arr[j] is less than or equal to pivot
            if (arr[j] <= pivot)
            {
                // Increment the index of the smaller element and swap arr[i] with arr[j].
                // Basically, put the current index j's integer to the lowest index
                ++i;
                std::swap(arr[i], arr[j]);
            }
        }

        // Swap arr[i+1] and arr[high] (pivot) to place the pivot in its correct position.
        std::swap(arr[i + 1], arr[high]);
        int pivotIndex = i + 1;

        // Display the array's arrangement at each step
        // Sample output:
        // Please enter 5 numbers: 2321 3434 12123 5662 2
        // Pivot: 2
        // 2 3434 12123 5662 2321
        // Pivot: 2321
        // 2321 12123 5662 3434
        // Pivot: 3434
        // 3434 5662 12123
        // Pivot: 12123
        // 5662 12123

        // std::cout << "Pivot: " << pivot << std::endl;
        // for (int k = low; k <= high; ++k)
        // {
        //     std::cout << arr[k] << " ";
        // }
        // std::cout << std::endl;

        // Recursive calls for the left and right subarrays.
        quickSort(arr, low, pivotIndex - 1);  // Sort the elements before the pivot.
        quickSort(arr, pivotIndex + 1, high); // Sort the elements after the pivot.
    }
}

int main()
{
    // User Input
    // Input Example:
    // Please enter 5 numbers: 23 0 -1 32 1
    // Sorted numbers in ascending order: -1 0 1 23 32
    std::array<int, 5> numbers;
    std::cout << "Please enter 5 numbers: ";
    std::cin >> numbers[0] >> numbers[1] >> numbers[2] >> numbers[3] >> numbers[4];

    // Sorting using QuickSort Algorithm
    // Syntax:
    // array_address, lowest_element, highest_element
    quickSort(numbers.data(), 0, 4);

    // Output phase
    std::cout << "Sorted numbers in ascending order: ";
    for (int num : numbers)
    {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}