format PE GUI 4.0
entry main

include 'win32a.inc'

; ProcessEntry32 struct
; This describes details about a process from the list of running processes in the snapshot
; This provides information about a currently running process obtained through a call to the Process32First or Process32Next function.
struct PROCESSENTRY32
       dwSize                   dd ? ;
       cntUsage                 dd ? ;
       th32ProcessID            dd ? ;
       th32DefaultHeapID        dd ? ;
       th32ModuleID             dd ? ;
       cntThreads               dd ? ;
       th32ParentProcessID      dd ? ;
       pcPriClassBase           dd ? ;
       dwFlags                  dd ? ;
       szExeFile                rb 260;
ends

section '.data' data readable writeable
    ; Prompts
    mbox_caption db "FASM LoadLibrary Activity", 0
    mbox_import_success db "Importing success", 0
    mbox_successful db "The program ran successfully!", 0

    library_load_fail db "Failed to load library", 0
    free_library_fail db "Failed to free library", 0

    ; Library names
    libname_kernel db 'kernel32.dll', 0
    libname_user32 db "user32.dll", 0
    
    ; Library handles
    kernel32 dd ?
    user32 dd ?

    ; Import names
    func_MessageBoxA db 'MessageBoxA', 0
    func_ExitProcess db 'ExitProcess', 0
    func_CreateToolhelp32Snapshot db "CreateToolhelp32Snapshot", 0
    func_Process32First db "Process32First", 0
    func_Process32Next db "Process32Next", 0
    func_lstrcmpiA db "lstrcmpiA", 0
    func_CreateFileA db "CreateFileA", 0
    func_WriteFile db "WriteFile", 0
    func_CloseHandle db "CloseHandle", 0
    func_FreeLibrary db "FreeLibrary", 0

    ; Import handles
    MessageBoxA dd ?
    ExitProcess dd ?
    FreeLibrary dd ?
    CreateToolhelp32Snapshot dd ?
    Process32First dd ?
    Process32Next dd ?
    lstrcmpiA dd ?
    CreateFileA dd ?
    WriteFile dd ?
    CloseHandle dd ?

    ; I/O related
    stdout dd ?
    bytes_read dd ?
    bytes_written dd ?

    ; Create an instance of the PROCESSENTRY32 structure
    pe32 PROCESSENTRY32                                                                                 ; an instance of PROCESSENTRY32
    PROCESSENTRY32_size = $ - pe32 
    process_snapshot_handle dd ?   

section '.code' code readable executable
main:
    ; Import everything that we will need
    call load_libraries

; Before closing program, free the libraries
close_program:
    ; For freeing the libraries
    call free_libraries

    ; For exiting the program
    push 0
    call [ExitProcess]

; Load libraries
load_libraries:
    ; Load kernel library
    push libname_kernel
    call [LoadLibraryA]
    mov [kernel32], eax

    test eax, eax
    jz library_load_error

    ; Load user32 library
    push libname_user32
    call [LoadLibraryA]
    mov [user32], eax

    test eax, eax
    jz library_load_error

    ; Load MessageBoxA 
    push func_MessageBoxA
    push [user32]
    call [GetProcAddress]
    mov [MessageBoxA], eax

    test eax, eax
    jz library_load_error

    ; Load ExitProcess
    push func_ExitProcess
    push [kernel32]
    call [GetProcAddress]
    mov [ExitProcess], eax

    test eax, eax
    jz library_load_error

    ; Load FreeLibrary
    push func_FreeLibrary
    push [kernel32]
    call [GetProcAddress]
    mov [FreeLibrary], eax

    test eax, eax
    jz library_load_error

    ; Load CreateToolhelp32Snapshot
    push func_CreateToolhelp32Snapshot
    push [kernel32]
    call [GetProcAddress]
    mov [CreateToolhelp32Snapshot], eax

    test eax, eax
    jz library_load_error

    ; Load Process32First
    push func_Process32First
    push [kernel32]
    call [GetProcAddress]
    mov [Process32First], eax

    test eax, eax
    jz library_load_error

    ; Load Process32Next
    push func_Process32Next
    push [kernel32]
    call [GetProcAddress]
    mov [Process32Next], eax

    test eax, eax
    jz library_load_error

    ; Load lstrcmpiA
    push func_lstrcmpiA
    push [kernel32]
    call [GetProcAddress]
    mov [lstrcmpiA], eax

    test eax, eax
    jz library_load_error

    ; Load CreateFileA
    push func_CreateFileA
    push [kernel32]
    call [GetProcAddress]
    mov [CreateFileA], eax

    test eax, eax
    jz library_load_error

    ; Load WriteFile
    push func_WriteFile
    push [kernel32]
    call [GetProcAddress]
    mov [WriteFile], eax

    test eax, eax
    jz library_load_error

    ; Load CloseHandle
    push func_CloseHandle
    push [kernel32]
    call [GetProcAddress]
    mov [CloseHandle], eax

    test eax, eax
    jz library_load_error

    ; Imports success message
    push 0                                                          ; Type of message box: MB_OK
    push mbox_caption
    push mbox_import_success
    push 0                                                          ; Handle to owner window
    call [MessageBoxA]

    ret

; Free libraries
free_libraries:
    push [kernel32]
    call [FreeLibrary]

    test eax, eax
    jz free_library_error

    push [user32]
    call [FreeLibrary]

    test eax, eax
    jz free_library_error

    ret

; Display error related to loading library
library_load_error:
    push 0                                                          ; Type of message box: MB_OK
    push mbox_caption
    push library_load_fail
    push 0                                                          ; Handle to owner window
    call [MessageBoxA]

; Display error related to freeing library
free_library_error:
    push 0                                                          ; Type of message box: MB_OK
    push mbox_caption
    push free_library_fail
    push 0                                                          ; Handle to owner window
    call [MessageBoxA]

; Import LoadLibraryA and GetProcAddress
section '.idata' import data readable writeable
    library kernel32, 'kernel32.dll'

    import kernel32, \
        LoadLibraryA, 'LoadLibraryA', \
        GetProcAddress, 'GetProcAddress'
