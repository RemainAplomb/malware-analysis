; Remove Trailing White Spaces
format PE Console
entry main

include 'win32ax.inc'

; Define constants and data
section '.data' data readable writeable
    prompt_msg db "Enter a string: ",0 ; Prompt
    prompt_len = $ - prompt_msg         ; The length of the prompt

    input_buffer db 256 dup(0)          ; Buffer to hold user input (max 256 characters)
    bytes_read dd ?                     ; For stdin

    bytes_written dd ?                  ; for stdout
    stdout dd ?                         ; Will contain the handler for stdout
    stdin dd ?                          ; Will contain the handler for stdin

; Main code section
section '.text' code readable executable

main:
    ; Initialize stdout and stdin
    invoke GetStdHandle, STD_OUTPUT_HANDLE
    mov [stdout], eax

    invoke GetStdHandle, STD_INPUT_HANDLE
    mov [stdin], eax

    ; Prompt the user for input
    ; Syntax:
    ; invoke {function}, [{variable_pointer}], {variable_to_print_or_ask}, {size_to_print_or_ask}, {bytes_read_or_written}, 0
    invoke WriteConsoleA, [stdout], prompt_msg, prompt_len, bytes_written, 0
    invoke ReadConsoleA, [stdin], input_buffer, 255, bytes_read, 0  ; read up to 255 characters

    ; Remove the CR and LF from the end of the string
    ; sub [bytes_read], 2
    ; mov byte [input_buffer + eax - 2], 0

    ; Now, print using the number of characters that were read
    invoke WriteConsoleA, [stdout], input_buffer, [bytes_read], bytes_written, 0

exit_program:
    ; Exit the program
    invoke ExitProcess, 0

; Function to strip trailing white spaces (spaces, tabs, CR, LF)
strip_trailing_whitespace:
    lea esi, [input_buffer]             ; Use register esi as pointer to the starting address of input_buffer

.find_end:
    ; Find end of string (null byte)
    cmp byte [esi], 0                   ; Compare the current byte to zero
    je .found_end                       ; If the null-terminator is found, end the loop
    inc esi                             ; Increment to point to the next address
    jmp .find_end                       ; Go to next iteration of .find_end

.found_end:
    ; Move back one byte from the end
    dec esi                             ; Move back to the previous address

.strip_whitespace:
    ; Check for white space characters and set to null
    cmp byte [esi], ' '  ; space        ; Compare whether the current byte is whitespace
    je .strip_char                      ; if it is, go to .strip_char
    cmp byte [esi], 9    ; tab
    je .strip_char
    cmp byte [esi], 10   ; LF
    je .strip_char
    cmp byte [esi], 13   ; CR
    je .strip_char
    ret                                 ; return if not a whitespace character

.strip_char:
    ; Replace character with null and move back one byte
    mov byte [esi], 0                   ; Reset the value of the byte to zero
    dec esi                             ; Decrement to point to the previous byte
    jmp .strip_whitespace               ; Go back to the .strip_whitespace loop



; Import section
section '.idata' data readable import
    ; These imports will help us communicate with Windows
    library kernel32, 'kernel32.dll'
    
    import kernel32, \
        GetStdHandle, 'GetStdHandle', \
        WriteConsoleA, 'WriteConsoleA', \
        ReadConsoleA, 'ReadConsoleA', \
        ExitProcess, 'ExitProcess'