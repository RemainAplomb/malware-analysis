; Encrypt FASM code

format PE Console
entry main

include 'win32a.inc'

section '.data' data readable writeable
    static_key db 0x55, 0xAA, 0x33, 0x77, 0x88, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x99, 0x66, 0x44, 0x22, 0x00, 0x11
    MS_ENH_RSA_AES_PROV db "Microsoft Enhanced RSA and AES Cryptographic Provider", 0
    MS_ENHANCED_PROV db "Microsoft Enhanced Cryptographic Provider v1.0", 0

    ;target_file db "sample.asm", 0
    ;decrypted_target_file db "sample.asm.ODMUA", 0

    target_file_handle dd ?
    ;decrypted_target_file_handle dd ?

    stdout dd ?
    bytes_read dd ?
    bytes_written dd ?

    mbox_title db "Notification", 0                                 ; Title of the messagebox
    file_open_success db "File opened successfully!", 0             ; Prompt for opening txt file succesfully
    file_write_success db "File written successfully!", 0           ; Prompt for writing to file successfully
    program_success db "Program executed successfully", 0

    file_open_fail db "Failed to open the file.", 0                 ; Prompt for failing to open file
    read_file_fail db "Failed to read the file.", 0                 ; Prompt for failing to read the file
    file_size_fail db "Failed to get the file size.", 0             ; Prompt for failing to get the file size

    skey_acquire_fail db "Failed to acquire session key.", 0        ; Prompt for failing to acquire session key
    create_hash_fail db "Failed to create hash.", 0                 ; Prompt for failing to create hash.
    crypt_hash_fail db "Failed crypt hash data.", 0                 ; Prompt for failing crypt hash data
    derive_key_fail db "Failed to derive key.", 0                   ; Prompt for failing to derive key
    files_found_fail db "Failed to find any file.", 0               ; Prompt for failing to find any file
    no_more_files_fail db "Failed to find other files.", 0          ; Prompt for failing to find other files.

    decryption_fail db "Decryption failed.", 0                      ; Prompt for failing the decryption process

    hXchgKey dd 0
    hUserKey dd ?
    
    provider_handle dd ?
    hkey_handle dd ?
    hash_handle dd ?

    buffer_size dd ?
    buffer rb 8192

    searchPattern db "*.asm", 0                                     ; Looking for all txt files
    target_file db 260 dup (0)                                         ; Maximum path length
    newline db 13, 10, 0                                            ; Newline characters
    winFindData WIN32_FIND_DATA
    winFind_handle dd ?

section '.code' code readable executable
main:
    ; Initialize stdout and stdin
    push -11                                                        ; STD_OUTPUT_HANDLE = -11
    call [GetStdHandle]
    mov [stdout], eax

    ; Acquire cryptographic context
    push 0                                                          ; dwFlags
    push 0x00000018                                                 ; dwProvType. PROV_RSA_FULL = 1. PROV_RSA_AES =24
    push MS_ENH_RSA_AES_PROV                                        ; szProvider
    push 0                                                          ; szContainer
    lea eax, [provider_handle]
    push eax                                                        ; *phProv = provider handle
    call [CryptAcquireContextA]

    ; Jump if eax is zero. False/Zero = Failed.
    test eax, eax
    jz skey_acquire_error

    ; Create the hash
    lea eax, [hash_handle]
    push eax                                                        ; *phHash = provider hash handle
    push 0                                                          ; dwFlags. CRYPT_SECRETDIGEST = 0x00000001
    push 0                                                          ; hKey (no hKey yet)
    push 0x00008003                                                 ; Algid. CALG_RC4 = 0x00006801
    push [provider_handle]                                          ; phProv = provider handle
    call [CryptCreateHash]

    ; Jump if eax is zero. False/Zero = Failed.
    test eax, eax
    jz create_hash_error

    ; Hash Data
    push 0                                                          ; dwFlags
    push 16                                                         ; dwDataLen
    lea eax, [static_key]
    push eax                                                        ; *pbData
    push [hash_handle]                                              ; hHash
    call [CryptHashData]

    ; Jump if eax is zero. False/Zero = Failed.
    test eax, eax
    jz crypt_hash_error

    ; Derive key 
    lea eax, [hkey_handle]
    push eax                                                        ; *phKey. A pointer to a HCRYPTKEY variable to receive the address of the handle of the newly generated key.
    push 0                                                 ; dwFlags. CRYPT_EXPORTABLE = 0x00000001
    push [hash_handle]                                              ; hBaseData
    push 0x00006801                                                 ; Algid. CALG_RC4 = 0x00006801
    push [provider_handle]                                          ; phProv = provider handle
    call [CryptDeriveKey]

    ; Jump if eax is zero. False/Zero = Failed.
    test eax, eax
    jz derive_key_error

    ; Try searching for the first asm file
    push winFindData
    push searchPattern
    call [FindFirstFileA]

    ; Check if FindFirstFile found any asm file
    cmp eax, -1                                                     ; INVALID_HANDLE_VALUE = -1
    je no_files_found_error

    mov [winFind_handle], eax                                       ; the handle for file search

    jmp decrypt_found_file

next_file:
    push winFindData
    push [winFind_handle]
    call [FindNextFileA]

    test eax, eax
    jz no_files_found_error

decrypt_found_file:
    ; Get the address of the file found, and put it to target_file
    lea eax, [winFindData.cFileName]
    push eax
    push target_file
    call [lstrcpyA]

    ; Create/Open Target file
    ; Open the file, read its content into a buffer
    push 0                                                          ; hTemplateFile
    push 0                                                          ; dwFlagsAndAttributes
    push 3                                                          ; dwCreationDisposition
    push 0                                                          ; lpSecurityAttributes
    push 0                                                          ; dwShareMode
    push 0C0000000h                                                 ; dwDesiredAccess
    push target_file                                                ; lpFileName - File to be opened
    call [CreateFileA]                                              ; CreateFileA function will return FileHandle in eax
    mov [target_file_handle], eax                                   ; Store file handle

    ; Jump if eax is zero. False/Zero = Failed.
    test eax, eax
    jz create_file_error

    ; Read content from the file
    ;invoke  ReadFile, [target_file_handle], buffer, [buffer_size], bytes_read, 0
    push 0                                                          ; lpOverlapped
    push bytes_read                                                 ; lpNumberOfBytesRead
    push 8192                                              ; nNumberOfBytesToRead
    push buffer                                                   ; lpBuffer
    push [target_file_handle]                                                        ; file handle
    call [ReadFile]                                                 ; ReadFile Function

    ; Jump if eax is zero. False/Zero = Failed.
    test eax, eax
    jz read_file_error

    ; Close file handle
    push [target_file_handle]
    call [CloseHandle]

    ; Decrypt the buffer
    ;push 8192                                                  ; dwBufLen. No longer needed in Decrypt
    push bytes_read                                           ; pdwDataLen
    lea eax, [buffer]
    push eax                                                  ; pbData
    push 0                                                    ; dwFlags
    push 1                                                    ; Final
    push 0                                                    ; hHash
    push [hkey_handle]
    call [CryptDecrypt]                                      ; Use CryptDecrypt instead of CryptEncrypt

    ; Jump if eax is zero. False/Zero = Failed.
    test eax, eax
    jz crypt_decrypt_error                                   ; Handle decryption error

    ; Print in console
    push 0
    push bytes_written
    push [bytes_read]
    push buffer
    push [stdout]
    call [WriteConsoleA]

    ; Create Decrypted file
    push 0                                                          ; hTemplateFile
    push 0                                                          ; dwFlagsAndAttributes
    push 2                                                          ; dwCreationDisposition. CREATE_ALWAYS = 2
    push 0                                                          ; lpSecurityAttributes
    push 0                                                          ; dwShareMode
    push 0C0000000h                                                 ; dwDesiredAccess
    push target_file                                      ; lpFileName - File to be opened
    call [CreateFileA]                                              ; CreateFileA function will return FileHandle in eax
    mov [target_file_handle], eax                                   ; Store file handle

    push 0                                                          ; lpOverlapped
    push bytes_written                                              ; lpNumberOfBytesWritten    
    push [bytes_read]                                               ; nNumberOfBytesToWrite
    push buffer                                                     ; lpBuffer
    push [target_file_handle]                                       ; file handle
    call [WriteFile]


    ; Read file contents
    ; mov eax, [target_file_handle] ; not needed, eax already contains handle
    ;mov edx, [bytes_read]
    ;call write_file

    ; Close file handle
    push [target_file_handle]
    call [CloseHandle]

    mov eax, program_success
    call message_box

    jmp next_file


; For exiting the program
close_program:
    push 0
    call [ExitProcess]

; For displaying messageboxes
; It expects value in eax for the content of the messagebox
message_box:
    push 0                                                          ; Type of message box: MB_OK
    push mbox_title
    push eax
    push 0                                                          ; Handle to owner window
    call [MessageBoxA]
    ret

no_files_found_error:
    mov eax, files_found_fail
    call message_box
    jmp close_program

no_more_files_error:
    mov eax, no_more_files_fail
    call message_box
    jmp close_program

skey_acquire_error:
    mov eax, skey_acquire_fail
    call message_box
    jmp close_program

create_hash_error:
    mov eax, create_hash_fail
    call message_box
    jmp close_program

crypt_hash_error:
    mov eax, crypt_hash_fail
    call message_box
    jmp close_program

derive_key_error:
    mov eax, derive_key_fail
    call message_box
    jmp close_program

create_file_error:
    mov eax, file_open_fail
    call message_box
    jmp close_program

read_file_error:
    mov eax, read_file_fail
    call message_box
    jmp close_program

crypt_decrypt_error:
    mov eax, decryption_fail
    call message_box
    jmp close_program

section '.idata' import data readable
    library advapi32, 'advapi32.dll', \
            kernel32, 'kernel32.dll', \
            user32, 'user32.dll'
  
    import advapi32, \
            CryptAcquireContextA, 'CryptAcquireContextA', \
            CryptCreateHash, 'CryptCreateHash', \
            CryptHashData, 'CryptHashData', \
            CryptDeriveKey, 'CryptDeriveKey', \
            CryptDecrypt, 'CryptDecrypt', \
            CryptDestroyKey, 'CryptDestroyKey', \
            CryptDestroyHash, 'CryptDestroyHash', \
            CryptReleaseContext, 'CryptReleaseContext'
  
    import kernel32, \
        ExitProcess, 'ExitProcess', \
        GetStdHandle, 'GetStdHandle', \
        WriteConsoleA, 'WriteConsoleA', \
        ReadConsoleA, 'ReadConsoleA', \
        CreateFileA, 'CreateFileA', \
        ReadFile, 'ReadFile', \
        WriteFile, 'WriteFile', \
        GlobalAlloc, 'GlobalAlloc', \
        GetFileSize, 'GetFileSize', \
        FindFirstFileA, 'FindFirstFileA', \
        FindNextFileA, 'FindNextFileA', \
        lstrcpyA, 'lstrcpyA', \
        CloseHandle, 'CloseHandle'
    
    import user32, \
       MessageBoxA, 'MessageBoxA'