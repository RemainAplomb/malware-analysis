; User Input
format PE Console
entry main

include 'win32ax.inc'

; Define constants and data
section '.data' data readable writeable
    prompt_msg db "Enter a string: ",0 ; Prompt
    prompt_len = $ - prompt_msg         ; The length of the prompt

    input_buffer db 256 dup(0)          ; Buffer to hold user input (max 256 characters)
    bytes_read dd ?                     ; For stdin

    bytes_written dd ?                  ; for stdout
    stdout dd ?                         ; Will contain the handler for stdout
    stdin dd ?                          ; Will contain the handler for stdin

; Main code section
section '.text' code readable executable

main:
    ; Initialize stdout and stdin
    invoke GetStdHandle, STD_OUTPUT_HANDLE
    mov [stdout], eax

    invoke GetStdHandle, STD_INPUT_HANDLE
    mov [stdin], eax

    ; Prompt the user for input
    ; Syntax:
    ; invoke {function}, [{variable_pointer}], {variable_to_print_or_ask}, {size_to_print_or_ask}, {bytes_read_or_written}, 0
    invoke WriteConsoleA, [stdout], prompt_msg, prompt_len, bytes_written, 0
    invoke ReadConsoleA, [stdin], input_buffer, 255, bytes_read, 0  ; read up to 255 characters

    ; Remove the CR and LF from the end of the string
    sub [bytes_read], 2
    mov byte [input_buffer + eax - 2], 0

    ; Now, print using the number of characters that were read
    invoke WriteConsoleA, [stdout], input_buffer, [bytes_read], bytes_written, 0

exit_program:
    ; Exit the program
    invoke ExitProcess, 0


; Import section
section '.idata' data readable import
    library kernel32, 'kernel32.dll'
    
    import kernel32, \
        GetStdHandle, 'GetStdHandle', \
        WriteConsoleA, 'WriteConsoleA', \
        ReadConsoleA, 'ReadConsoleA', \
        ExitProcess, 'ExitProcess'